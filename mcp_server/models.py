# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:37:38+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class AbortMultipartUploadInput(BaseModel):
    pass


class AbortVaultLockInput(BaseModel):
    pass


class ActionCode(Enum):
    ArchiveRetrieval = 'ArchiveRetrieval'
    InventoryRetrieval = 'InventoryRetrieval'
    Select = 'Select'


class ArchiveCreationOutput(BaseModel):
    pass


class CannedACL(Enum):
    private = 'private'
    public_read = 'public-read'
    public_read_write = 'public-read-write'
    aws_exec_read = 'aws-exec-read'
    authenticated_read = 'authenticated-read'
    bucket_owner_read = 'bucket-owner-read'
    bucket_owner_full_control = 'bucket-owner-full-control'


class CompleteMultipartUploadInput(BaseModel):
    pass


class CompleteVaultLockInput(BaseModel):
    pass


class CreateVaultInput(BaseModel):
    pass


class CreateVaultOutput(BaseModel):
    pass


class DateTime(RootModel[str]):
    root: str


class DeleteArchiveInput(BaseModel):
    pass


class DeleteVaultAccessPolicyInput(BaseModel):
    pass


class DeleteVaultInput(BaseModel):
    pass


class DeleteVaultNotificationsInput(BaseModel):
    pass


class DescribeJobInput(BaseModel):
    pass


class DescribeVaultInput(BaseModel):
    pass


class EncryptionType(Enum):
    aws_kms = 'aws:kms'
    AES256 = 'AES256'


class ExpressionType(Enum):
    SQL = 'SQL'


class FileHeaderInfo(Enum):
    USE = 'USE'
    IGNORE = 'IGNORE'
    NONE = 'NONE'


class GetDataRetrievalPolicyInput(BaseModel):
    pass


class GetJobOutputInput(BaseModel):
    pass


class GetVaultAccessPolicyInput(BaseModel):
    pass


class GetVaultLockInput(BaseModel):
    pass


class GetVaultNotificationsInput(BaseModel):
    pass


class InitiateJobOutput(BaseModel):
    pass


class InitiateMultipartUploadInput(BaseModel):
    pass


class InitiateMultipartUploadOutput(BaseModel):
    pass


class InitiateVaultLockOutput(BaseModel):
    pass


class InsufficientCapacityException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class LimitExceededException(RootModel[Any]):
    root: Any


class ListJobsInput(BaseModel):
    pass


class ListMultipartUploadsInput(BaseModel):
    pass


class ListPartsInput(BaseModel):
    pass


class ListProvisionedCapacityInput(BaseModel):
    pass


class ListTagsForVaultInput(BaseModel):
    pass


class ListVaultsInput(BaseModel):
    pass


class MissingParameterValueException(RootModel[Any]):
    root: Any


class NullableLong(RootModel[int]):
    root: int


class Permission(Enum):
    FULL_CONTROL = 'FULL_CONTROL'
    WRITE = 'WRITE'
    WRITE_ACP = 'WRITE_ACP'
    READ = 'READ'
    READ_ACP = 'READ_ACP'


class PolicyEnforcedException(RootModel[Any]):
    root: Any


class PurchaseProvisionedCapacityInput(BaseModel):
    pass


class PurchaseProvisionedCapacityOutput(BaseModel):
    pass


class QuoteFields(Enum):
    ALWAYS = 'ALWAYS'
    ASNEEDED = 'ASNEEDED'


class RequestTimeoutException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class Size(RootModel[int]):
    root: int


class StatusCode(Enum):
    InProgress = 'InProgress'
    Succeeded = 'Succeeded'
    Failed = 'Failed'


class StorageClass(Enum):
    STANDARD = 'STANDARD'
    REDUCED_REDUNDANCY = 'REDUCED_REDUNDANCY'
    STANDARD_IA = 'STANDARD_IA'


class Stream(RootModel[str]):
    root: str


class TagKey(RootModel[str]):
    root: str


class TagValue(RootModel[str]):
    root: str


class Type(Enum):
    AmazonCustomerByEmail = 'AmazonCustomerByEmail'
    CanonicalUser = 'CanonicalUser'
    Group = 'Group'


class UploadArchiveInput(BaseModel):
    body: Optional[Stream] = None


class UploadMultipartPartInput(BaseModel):
    body: Optional[Stream] = None


class UploadMultipartPartOutput(BaseModel):
    pass


class Boolean(RootModel[bool]):
    root: bool


class Httpstatus(RootModel[int]):
    root: int


class Long(RootModel[int]):
    root: int


class String(RootModel[str]):
    root: str


class Policy1(BaseModel):
    Policy: Optional[String] = None


class FieldAccountIdVaultsVaultNameAccessPolicyPutRequest(BaseModel):
    policy: Optional[Policy1] = Field(
        None, description='Contains the vault access policy.'
    )


class FieldAccountIdVaultsVaultNameArchivesPostRequest(BaseModel):
    body: Optional[str] = Field(None, description='The data to upload.')


class FieldAccountIdVaultsVaultNameLockPolicyPostRequest(BaseModel):
    policy: Optional[Policy1] = Field(
        None, description='Contains the vault lock policy.'
    )


class FieldAccountIdVaultsVaultNameMultipartUploadsUploadIdPutRequest(BaseModel):
    body: Optional[str] = Field(None, description='The data to upload.')


class Operation(Enum):
    add = 'add'


class FieldAccountIdVaultsVaultNameTagsOperationAddPostRequest(BaseModel):
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags to add to the vault. Each tag is composed of a key and a value. The value can be an empty string.',
    )


class Operation2(Enum):
    remove = 'remove'


class FieldAccountIdVaultsVaultNameTagsOperationRemovePostRequest(BaseModel):
    TagKeys: Optional[List[String]] = Field(
        None,
        description='A list of tag keys. Each corresponding tag is removed from the vault.',
    )


class CSVInput(BaseModel):
    Comments: Optional[String] = None
    FieldDelimiter: Optional[String] = None
    FileHeaderInfo_1: Optional[FileHeaderInfo] = Field(None, alias='FileHeaderInfo')
    QuoteCharacter: Optional[String] = None
    QuoteEscapeCharacter: Optional[String] = None
    RecordDelimiter: Optional[String] = None


class CSVOutput(BaseModel):
    FieldDelimiter: Optional[String] = None
    QuoteCharacter: Optional[String] = None
    QuoteEscapeCharacter: Optional[String] = None
    QuoteFields_1: Optional[QuoteFields] = Field(None, alias='QuoteFields')
    RecordDelimiter: Optional[String] = None


class DataRetrievalRule(BaseModel):
    BytesPerHour: Optional[NullableLong] = None
    Strategy: Optional[String] = None


class DataRetrievalRulesList(RootModel[List[DataRetrievalRule]]):
    root: List[DataRetrievalRule]


class DescribeVaultOutput(BaseModel):
    CreationDate: Optional[String] = None
    LastInventoryDate: Optional[String] = None
    NumberOfArchives: Optional[Long] = None
    SizeInBytes: Optional[Long] = None
    VaultARN: Optional[String] = None
    VaultName: Optional[String] = None


class Encryption(BaseModel):
    EncryptionType_1: Optional[EncryptionType] = Field(None, alias='EncryptionType')
    KMSContext: Optional[String] = None
    KMSKeyId: Optional[String] = None


class GetJobOutputOutput(BaseModel):
    body: Optional[Stream] = None
    status: Optional[Httpstatus] = None


class GetVaultLockOutput(BaseModel):
    CreationDate: Optional[String] = None
    ExpirationDate: Optional[String] = None
    Policy: Optional[String] = None
    State: Optional[String] = None


class Grantee(BaseModel):
    DisplayName: Optional[String] = None
    EmailAddress: Optional[String] = None
    ID: Optional[String] = None
    Type_1: Type = Field(..., alias='Type')
    URI: Optional[String] = None


class InputSerialization(BaseModel):
    csv: Optional[CSVInput] = None


class InventoryRetrievalJobDescription(BaseModel):
    EndDate: Optional[DateTime] = None
    Format: Optional[String] = None
    Limit: Optional[String] = None
    Marker: Optional[String] = None
    StartDate: Optional[DateTime] = None


class InventoryRetrievalJobInput(BaseModel):
    EndDate: Optional[String] = None
    Limit: Optional[String] = None
    Marker: Optional[String] = None
    StartDate: Optional[String] = None


class NotificationEventList(RootModel[List[String]]):
    root: List[String]


class OutputSerialization(BaseModel):
    csv: Optional[CSVOutput] = None


class PartListElement(BaseModel):
    RangeInBytes: Optional[String] = None
    SHA256TreeHash: Optional[String] = None


class ProvisionedCapacityDescription(BaseModel):
    CapacityId: Optional[String] = None
    ExpirationDate: Optional[String] = None
    StartDate: Optional[String] = None


class ProvisionedCapacityList(RootModel[List[ProvisionedCapacityDescription]]):
    root: List[ProvisionedCapacityDescription]


class SelectParameters(BaseModel):
    Expression: Optional[String] = None
    ExpressionType_1: Optional[ExpressionType] = Field(None, alias='ExpressionType')
    InputSerialization_1: Optional[InputSerialization] = Field(
        None, alias='InputSerialization'
    )
    OutputSerialization_1: Optional[OutputSerialization] = Field(
        None, alias='OutputSerialization'
    )


class TagKeyList(RootModel[List[String]]):
    root: List[String]


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class UploadListElement(BaseModel):
    ArchiveDescription: Optional[String] = None
    CreationDate: Optional[String] = None
    MultipartUploadId: Optional[String] = None
    PartSizeInBytes: Optional[Long] = None
    VaultARN: Optional[String] = None


class UploadsList(RootModel[List[UploadListElement]]):
    root: List[UploadListElement]


class VaultAccessPolicy(BaseModel):
    Policy: Optional[String] = None


class VaultList(RootModel[List[DescribeVaultOutput]]):
    root: List[DescribeVaultOutput]


class VaultLockPolicy(BaseModel):
    Policy: Optional[String] = None


class VaultNotificationConfig(BaseModel):
    Events: Optional[NotificationEventList] = None
    SNSTopic: Optional[String] = None


class Hashmap(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class Policy(BaseModel):
    Rules: Optional[DataRetrievalRulesList] = None


class FieldAccountIdPoliciesDataRetrievalPutRequest(BaseModel):
    Policy_1: Optional[Policy] = Field(
        None, alias='Policy', description='Data retrieval policy.'
    )


class FieldAccountIdVaultsVaultNameNotificationConfigurationPutRequest(BaseModel):
    vaultNotificationConfig: Optional[VaultNotificationConfig] = Field(
        None, description="Represents a vault's notification configuration."
    )


class AddTagsToVaultInput(BaseModel):
    Tags: Optional[TagMap] = None


class DataRetrievalPolicy(BaseModel):
    Rules: Optional[DataRetrievalRulesList] = None


class GetDataRetrievalPolicyOutput(BaseModel):
    Policy: Optional[DataRetrievalPolicy] = None


class GetVaultAccessPolicyOutput(BaseModel):
    policy: Optional[VaultAccessPolicy] = None


class GetVaultNotificationsOutput(BaseModel):
    vaultNotificationConfig: Optional[VaultNotificationConfig] = None


class Grant(BaseModel):
    Grantee_1: Optional[Grantee] = Field(None, alias='Grantee')
    Permission_1: Optional[Permission] = Field(None, alias='Permission')


class InitiateVaultLockInput(BaseModel):
    policy: Optional[VaultLockPolicy] = None


class ListMultipartUploadsOutput(BaseModel):
    Marker: Optional[String] = None
    UploadsList_1: Optional[UploadsList] = Field(None, alias='UploadsList')


class ListProvisionedCapacityOutput(BaseModel):
    ProvisionedCapacityList_1: Optional[ProvisionedCapacityList] = Field(
        None, alias='ProvisionedCapacityList'
    )


class ListTagsForVaultOutput(BaseModel):
    Tags: Optional[TagMap] = None


class ListVaultsOutput(BaseModel):
    Marker: Optional[String] = None
    VaultList_1: Optional[VaultList] = Field(None, alias='VaultList')


class PartList(RootModel[List[PartListElement]]):
    root: List[PartListElement]


class RemoveTagsFromVaultInput(BaseModel):
    TagKeys: Optional[TagKeyList] = None


class SetDataRetrievalPolicyInput(BaseModel):
    Policy: Optional[DataRetrievalPolicy] = None


class SetVaultAccessPolicyInput(BaseModel):
    policy: Optional[VaultAccessPolicy] = None


class SetVaultNotificationsInput(BaseModel):
    vaultNotificationConfig: Optional[VaultNotificationConfig] = None


class AccessControlPolicyList(RootModel[List[Grant]]):
    root: List[Grant]


class ListPartsOutput(BaseModel):
    ArchiveDescription: Optional[String] = None
    CreationDate: Optional[String] = None
    Marker: Optional[String] = None
    MultipartUploadId: Optional[String] = None
    PartSizeInBytes: Optional[Long] = None
    Parts: Optional[PartList] = None
    VaultARN: Optional[String] = None


class S3Location(BaseModel):
    AccessControlList: Optional[AccessControlPolicyList] = None
    BucketName: Optional[String] = None
    CannedACL_1: Optional[CannedACL] = Field(None, alias='CannedACL')
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    Prefix: Optional[String] = None
    StorageClass_1: Optional[StorageClass] = Field(None, alias='StorageClass')
    Tagging: Optional[Hashmap] = None
    UserMetadata: Optional[Hashmap] = None


class OutputLocation(BaseModel):
    S3: Optional[S3Location] = None


class JobParameters(BaseModel):
    ArchiveId: Optional[String] = None
    Description: Optional[String] = None
    Format: Optional[String] = None
    InventoryRetrievalParameters: Optional[InventoryRetrievalJobInput] = None
    OutputLocation_1: Optional[OutputLocation] = Field(None, alias='OutputLocation')
    RetrievalByteRange: Optional[String] = None
    SNSTopic: Optional[String] = None
    SelectParameters_1: Optional[SelectParameters] = Field(
        None, alias='SelectParameters'
    )
    Tier: Optional[String] = None
    Type: Optional[String] = None


class FieldAccountIdVaultsVaultNameJobsPostRequest(BaseModel):
    jobParameters: Optional[JobParameters] = Field(
        None, description='Provides options for defining a job.'
    )


class GlacierJobDescription(BaseModel):
    Action: Optional[ActionCode] = None
    ArchiveId: Optional[String] = None
    ArchiveSHA256TreeHash: Optional[String] = None
    ArchiveSizeInBytes: Optional[Size] = None
    Completed: Optional[Boolean] = None
    CompletionDate: Optional[String] = None
    CreationDate: Optional[String] = None
    InventoryRetrievalParameters: Optional[InventoryRetrievalJobDescription] = None
    InventorySizeInBytes: Optional[Size] = None
    JobDescription: Optional[String] = None
    JobId: Optional[String] = None
    JobOutputPath: Optional[String] = None
    OutputLocation_1: Optional[OutputLocation] = Field(None, alias='OutputLocation')
    RetrievalByteRange: Optional[String] = None
    SHA256TreeHash: Optional[String] = None
    SNSTopic: Optional[String] = None
    SelectParameters_1: Optional[SelectParameters] = Field(
        None, alias='SelectParameters'
    )
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    StatusMessage: Optional[String] = None
    Tier: Optional[String] = None
    VaultARN: Optional[String] = None


class JobList(RootModel[List[GlacierJobDescription]]):
    root: List[GlacierJobDescription]


class ListJobsOutput(BaseModel):
    JobList_1: Optional[JobList] = Field(None, alias='JobList')
    Marker: Optional[String] = None


class InitiateJobInput(BaseModel):
    jobParameters: Optional[JobParameters] = None
